<script src="https://unpkg.com/ml5@0.4.3/dist/ml5.min.js" type="text/javascript"></script>
<script src="/js/on-change/index.js" type="text/javascript"></script> 


<h1 class="mt-4">Dashboard</h1>
<p class="lead mb-3">Welcome <%= user.docs[0].name %></p>
<a href="/users/logout" class="btn btn-secondary">Logout</a> 



<script>
  let yolo;
  let status;
  let objects = [];
  let video;
  let canvas, ctx;
  let width = 600;
  let height = 416;
  let presenceStatus = 'no-person'; // the first status of the person
  let timeToDecleration = 10000; // 10sec consistency detection threshold

  // YOLO options parameters
  const options = {
    classProbThreshold: 0.9,
    iouThreshold: 0.9,
    filterBoxesThreshold: 0.9,
    maxBoxes: 1,
  }


  async function make() {
    // get the video
    video = await getVideo();
    yolo = await ml5.YOLO(video, startDetecting, options)
    console.log(yolo)
    canvas = createCanvas(width, height);
    ctx = canvas.getContext('2d');

    // check for changes in detection 
    watchedObject = onChange(objects, () => {
      console.log('Object changed:');
      console.log('detection value ' + watchedObject[0].label);
      if (!(presenceStatus == watchedObject[0].label)) checkPresence(watchedObject[0].label, timeToDecleration);

    });
  }


  // when the dom is loaded, call make();
  window.addEventListener('DOMContentLoaded', () => {
    make();
  });

  objects.push({
    label: 'no-value',
  })


  const startDetecting = () => {
    console.log('model ready')
    detect();
    // collectData(); 
  }

  const detect = () => {
    yolo.detect(function (err, results) {
      if (err) {
        console.log(err);
        return
      }

      objects = (results.length < 1 || objects == undefined) ? [{
        label: 'no-person'
                }] : results;
      //  console.log(results);
      if (objects[0].label === 'person') {
        watchedObject[0].label = objects[0].label;
      } else {
        watchedObject[0].label = 'no-person';
      }
      // console.log(watchedObject[0].label);
      if (objects) {
        draw(); // one can comment this inorder to stop the visual on the dom 
      }
      setTimeout(() => {
        detect();
      }, 300);
      // detect();
    });

  };

  const draw = () => {
    // Clear part of the canvas
    ctx.fillStyle = "#000000"
    ctx.fillRect(0, 0, width, height);

    ctx.drawImage(video, 0, 0);
    for (let i = 0; i < objects.length; i++) {

      ctx.font = "16px Arial";
      ctx.fillStyle = "green";
      ctx.fillText(objects[i].label, objects[i].x * width - 4, objects[i].y * height - 8);

      ctx.beginPath();
      ctx.rect(objects[i].x * width, objects[i].y * height, objects[i].w * width, objects[i].h * height);
      ctx.strokeStyle = "green";
      ctx.stroke();
      ctx.closePath();
    }
  }

  // Helper Functions
  async function getVideo() {
    // Grab elements, create settings, etc.
    const videoElement = document.createElement('video');
    videoElement.setAttribute("style", "display: none;");
    videoElement.width = width;
    videoElement.height = height;
    document.body.appendChild(videoElement);

    // Create a webcam capture
    const capture = await navigator.mediaDevices.getUserMedia({
      video: {
        frameRate: {
          max: 10
        }
      }
    })

    videoElement.srcObject = capture;
    videoElement.play();
    return videoElement
  }

  const createCanvas = (w, h) => {
    const canvas = document.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    document.body.appendChild(canvas);
    return canvas;
  }



  // function to send data to server and db
  const sendData = (timestamp, statment) => {
    fetch('/dashboard', {
        method: 'post',
        headers: {
          "Content-Type": 'application/json'
        },
        body: JSON.stringify({
          binding_id: 'dynamic user id', // here should come a dynamic id 
          statment: statment,
          timestamp: timestamp
        })
      }
    ).then(
      reply => reply.text()
    ).then(
      console.log
    ).catch(
      console.log
    )
  };


  // consistency detection function - countdown that check every sec if detection value is still true
  let presenceTime = new Map();
  let presenceTimeDB = {};
  const milisNow = () => Date.now();

  const checkPresence = (statment, timeToDecleration) => {
    //let timeToDecleration = 10000;
    let timeToDeclerationOrigin = timeToDecleration;

    const interId = setInterval(() => {
      let countDownTime = milisNow() + (timeToDecleration -= 1000); // 1 min 
      let restTime = countDownTime - milisNow();

      if (objects[0].label != statment) clearInterval(interId);

      if (restTime <= 0 && objects[0].label == statment) {
        presenceStatus = statment;
        timestamp = (countDownTime - timeToDeclerationOrigin)
        presenceTime.set(timestamp, statment);

        sendData(timestamp, statment);

        console.log(countDownTime - timeToDeclerationOrigin);
        clearInterval(interId);
        console.log(presenceTime);
      };

      if (restTime <= 0) clearInterval(interId);
      console.log(restTime);

    }, 1000);
  }
</script>